"""
–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ML Production API
"""

import requests
import json
from datetime import datetime, date, timedelta


def test_ml_api_health():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è ML API"""
    try:
        response = requests.get("http://localhost:8081/status")
        print(f"–°—Ç–∞—Ç—É—Å API: {response.status_code}")
        if response.status_code == 200:
            data = response.json()
            print(f"–û—Ç–≤–µ—Ç: {json.dumps(data, indent=2, ensure_ascii=False)}")
        else:
            print(f"–û—à–∏–±–∫–∞: {response.text}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")


def test_no_show_prediction():
    """–¢–µ—Å—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ—è–≤–∫–∏"""
    try:
        planning_id = 12345
        response = requests.get(f"http://localhost:8081/api/ml/noshowscore", 
                               params={"planning_id": planning_id})
        
        print(f"\n–ü—Ä–æ–≥–Ω–æ–∑ –Ω–µ—è–≤–∫–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ {planning_id}:")
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code == 200:
            data = response.json()
            print(f"–û—Ç–≤–µ—Ç: {json.dumps(data, indent=2, ensure_ascii=False)}")
        else:
            print(f"–û—à–∏–±–∫–∞: {response.text}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")


def test_load_balance():
    """–¢–µ—Å—Ç –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏"""
    try:
        data = {
            "start_date": date.today().isoformat(),
            "end_date": (date.today() + timedelta(days=7)).isoformat(),
            "department_ids": [1, 2, 3],
            "target_utilization": 0.8
        }
        
        response = requests.post("http://localhost:8081/api/ml/load-balance", 
                               json=data)
        
        print(f"\n–ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –Ω–∞–≥—Ä—É–∑–∫–∏:")
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code == 200:
            result = response.json()
            print(f"–û—Ç–≤–µ—Ç: {json.dumps(result, indent=2, ensure_ascii=False)}")
        else:
            print(f"–û—à–∏–±–∫–∞: {response.text}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")


def test_schedule_event():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        data = {
            "event_type": "ARRIVE_DATE",
            "planning_id": 12345,
            "timestamp": datetime.utcnow().isoformat(),
            "data": {"arrival_time": datetime.utcnow().isoformat()}
        }
        
        response = requests.post("http://localhost:8081/api/ml/schedule-event", 
                               json=data)
        
        print(f"\n–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è:")
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code == 200:
            result = response.json()
            print(f"–û—Ç–≤–µ—Ç: {json.dumps(result, indent=2, ensure_ascii=False)}")
        else:
            print(f"–û—à–∏–±–∫–∞: {response.text}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MFDP ML Production API")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    test_ml_api_health()
    test_no_show_prediction()
    test_load_balance()
    test_schedule_event()
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ") 