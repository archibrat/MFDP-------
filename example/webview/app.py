import pandas as pd
import numpy as np
import streamlit as st
from sqlmodel import Session, select
from app.models.prediction import ModelMetrics
from database.database import create_db_and_tables, engine
from models.prediction import PredictionResult
from services.ml_service import get_ml_service
import matplotlib.pyplot as plt
import os
import requests

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    create_db_and_tables()
    
# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_test_data():
    test_data = {
        "age": 45,
        "gender": "f",
        "district": "central",
        "scholarship": False,
        "condition_a": True,
        "condition_b": False,
        "condition_c": False,
        "accessibility_level": 0,
        "notification_sent": True,
        "planned_date": "2025-06-10T09:00:00",
        "session_date": "2025-06-11T10:00:00"
    }
    return test_data

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫ –º–æ–¥–µ–ª–µ–π
def plot_model_metrics(metrics):
    fig, ax = plt.subplots(figsize=(10,6))
    models = list(metrics.keys())
    auc_scores = [m['roc_auc'] for m in metrics.values()]
    
    ax.barh(models, auc_scores, color='skyblue')
    ax.set_xlabel('AUC-ROC Score')
    ax.set_title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π')
    ax.xaxis.grid(True, linestyle='--', alpha=0.7)
    
    return fig

def main():
    st.set_page_config(
        page_title="–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞",
        page_icon="üè•",
        layout="wide"
    )
    
    init_db()
    ml_service = get_ml_service()
    
    with st.sidebar:
        st.header("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
        page = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª",
            ["–ì–ª–∞–≤–Ω–∞—è", "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—è–≤–æ–∫", "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "Iris Dataset"]
        )
        
        if page == "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—è–≤–æ–∫":
            st.info("""
                **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**
                1. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞
                2. –ù–∞–∂–º–∏—Ç–µ '–°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑'
                3. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            """)
            
        if page == "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞":
            st.info("""
                **–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**
                - –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
                - –ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–µ–π
                - –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–≤
            """)

    if page == "–ì–ª–∞–≤–Ω–∞—è":
        st.title("–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞")
        st.image("https://example.com/medical-analytics.jpg", use_column_width=True)
        
        col1, col2 = st.columns(2)
        with col1:
            st.markdown("""
                ### –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:
                - –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—è–≤–æ–∫ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
                - –ê–Ω–∞–ª–∏–∑ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —Ä–∏—Å–∫–∞
                - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ú–ò–°
            """)
            
        with col2:
            st.markdown("""
                ### –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
                - –¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –¥–æ 85%
                - –°–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–µ–≤ –Ω–∞ 30%
                - –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                - –†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            """)
            
    elif page == "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—è–≤–æ–∫":
        st.title("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∏—Å–∫–∞ –Ω–µ—è–≤–∫–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞")
        
        test_data = load_test_data()
        with st.form("prediction_form"):
            col1, col2 = st.columns(2)
            
            with col1:
                age = st.number_input("–í–æ–∑—Ä–∞—Å—Ç", min_value=0, max_value=120, value=test_data["age"])
                gender = st.selectbox("–ü–æ–ª", ["m", "f"], index=1 if test_data["gender"] == "f" else 0)
                district = st.text_input("–†–∞–π–æ–Ω", value=test_data["district"])
                scholarship = st.checkbox("–õ—å–≥–æ—Ç–Ω–∏–∫", value=test_data["scholarship"])
                
            with col2:
                condition_a = st.checkbox("–ì–∏–ø–µ—Ä—Ç–æ–Ω–∏—è", value=test_data["condition_a"])
                condition_b = st.checkbox("–î–∏–∞–±–µ—Ç", value=test_data["condition_b"])
                condition_c = st.checkbox("–ê–ª–∫–æ–≥–æ–ª–∏–∑–º", value=test_data["condition_c"])
                accessibility = st.selectbox("–ì—Ä—É–ø–ø–∞ –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏", 
                    options=[0,1,2,3,4], 
                    index=test_data["accessibility_level"]
                )
                notification = st.checkbox("SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", value=test_data["notification_sent"])
                
            submitted = st.form_submit_button("–°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑")
            
        if submitted:
            with st.spinner("–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö..."):
                try:
                    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
                    patient_data = {
                        "age": age,
                        "gender": gender,
                        "district": district,
                        "scholarship": scholarship,
                        "condition_a": condition_a,
                        "condition_b": condition_b,
                        "condition_c": condition_c,
                        "accessibility_level": accessibility,
                        "notification_sent": notification,
                        "planned_date": test_data["planned_date"],
                        "session_date": test_data["session_date"]
                    }
                    
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                    prediction = ml_service.predict(patient_data)
                    
                    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è")
                    
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.metric("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–µ—è–≤–∫–∏", f"{prediction.prediction_value*100:.1f}%")
                    with col2:
                        st.metric("–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞", prediction.risk_level)
                    with col3: 
                        st.metric("–ú–æ–¥–µ–ª—å", prediction.model_version)
                        
                    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                    st.subheader("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
                    for i, rec in enumerate(prediction.recommendations, 1):
                        st.markdown(f"{i}. {rec}")
                        
                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    with Session(engine) as session:
                        db_prediction = PredictionResult(**prediction.dict())
                        session.add(db_prediction)
                        session.commit()
                        
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
                    
    elif page == "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞":
        st.title("–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–Ω–µ–ª—å")
        
        with Session(engine) as session:
            # –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç—Ä–∏–∫ –º–æ–¥–µ–ª–µ–π
            model_metrics = session.exec(select(ModelMetrics)).all()
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
            col1, col2 = st.columns(2)
            with col1:
                st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–≤")
                risks = session.exec(
                    select(PredictionResult.risk_level)
                ).all()
                risk_counts = pd.Series(risks).value_counts()
                st.bar_chart(risk_counts)
                
            with col2:
                st.subheader("–¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π")
                metrics_data = {m.model_version: {"roc_auc": m.metric_value} 
                               for m in model_metrics if m.metric_name == "roc_auc"}
                fig = plot_model_metrics(metrics_data)
                st.pyplot(fig)
                
    elif page == "Iris Dataset":
        # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è Iris Dataset
        st.header("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Fisher's Iris –¥–∞—Ç–∞—Å–µ—Ç–∞")
        df = load_data()

        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        fig, ax = plt.subplots()
        plt.scatter(df['sepal_length'], df['sepal_width'], c='blue', label='Iris-setosa')
        plt.scatter(df['sepal_length'], df['petal_width'], c='red', label='Iris-versicolor')
        plt.scatter(df['sepal_length'], df['petal_length'], c='green', label='Iris-virginica')

        plt.xlabel('sepal_length')
        plt.ylabel('sepal_width')
        plt.title('Iris Fisher Dataset')
        plt.legend()
        
        st.pyplot(fig)

if __name__ == "__main__":
    main()
